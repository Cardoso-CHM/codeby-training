import { ProductTypes } from 'vtex.product-context';
declare type ClusterBy = keyof ProductTypes.Installment;
/**
 * Pick which installments should be used. First it clusters all installments
 * by the value of clusterBy, then picks the cluster with the biggest amount of
 * installments options and then return this list sorted by the amount of installments
 * @param installmentsList All installments
 * @param clusterBy
 */
export default function pickInstallmentsList(installmentsList: ProductTypes.Installment[], clusterBy: ClusterBy): ProductTypes.Installment[];
/**
 * Cluster installments by the passed key of installments type
 * @param installmentsList List of installments to be clustered
 * @param clusterBy Key to be clustered by
 */
export declare function clusterInstallments(installmentsList: ProductTypes.Installment[], clusterBy: keyof ProductTypes.Installment): Record<string, ProductTypes.Installment[]>;
export declare function pickMaxInstallmentsOption(installmentsList: ProductTypes.Installment[], filteringRules?: {
    paymentSystemName?: string;
    installmentsQuantity?: number;
}): ProductTypes.Installment;
export declare function pickMaxInstallmentsOptionWithoutInterest(installmentsList: ProductTypes.Installment[], filteringRules?: {
    paymentSystemName?: string;
    installmentsQuantity?: number;
}): ProductTypes.Installment;
export {};

import React from 'react';
import type { WrappedComponentProps } from 'react-intl';
interface OAuthProvider {
    className: string;
    providerName: string;
}
export declare type ClickableOption = 'store/loginOptions.emailVerification' | 'store/loginOptions.emailAndPassword';
interface Props extends WrappedComponentProps {
    onOptionsClick: (option: ClickableOption) => void;
    title: string;
    fallbackTitle: string;
    options: {
        accessKey: boolean;
        password: boolean;
        oAuthProviders: OAuthProvider[];
    };
    className?: string;
    isAlwaysShown?: boolean;
    onLoginSuccess: () => void;
    providerPasswordButtonLabel?: string;
}
declare const _default: React.ForwardRefExoticComponent<Pick<Props, "title" | "providerPasswordButtonLabel" | "onLoginSuccess" | "className" | "isAlwaysShown" | "onOptionsClick" | "fallbackTitle" | "options"> & {
    forwardedRef?: ((instance: any) => void) | React.RefObject<any> | null | undefined;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<Props>;
};
export default _default;
